apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

tasks.withType(dokkaHtmlPartial.getClass()).configureEach {
    pluginsMapConfiguration.set(
            ["org.jetbrains.dokka.base.DokkaBase": """{ "separateInheritedMembers": true}"""]
    )
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives androidSourcesJar
    archives javadocJar
}


group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

def siteUrl = 'https://github.com/vizdy/ScratchView'
def gitUrl = 'https://github.com/vizdy/ScratchView.git'

// Because the components are created only during the afterEvaluate phase,
// configure publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                if (project.plugins.findPlugin("com.android.library")) {
                  from components.release
                } else {
                  from components.java
                }
                groupId = PUBLISH_GROUP_ID
                artifactId = PUBLISH_ARTIFACT_ID
                version = PUBLISH_VERSION
                //artifact("$buildDir/outputs/aar/Scratch-release.aar")

                artifact androidSourcesJar
                artifact javadocJar
                System.out.println("...signing.keyId: " + rootProject.ext["signing.keyId"])
                System.out.println("...signing.password: " + rootProject.ext["signing.password"])

                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'This is a android custom view, like a scratch card effect!'
                    url = siteUrl
                    packaging = 'aar'
                    //properties = []
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'vizdyy'
                            name = 'Vishvambhar Dayal'
                            email = 'vizdyy@gmail.com'
                        }
                    }
                    scm {
                        connection = gitUrl
                        developerConnection = gitUrl
                        url = siteUrl
                    }
                }
            }
            // Creates a Maven publication called “debug”.
            debug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.debug

                groupId = PUBLISH_GROUP_ID
                artifactId = PUBLISH_ARTIFACT_ID
                version = PUBLISH_VERSION
            }
        }

        signing {
            // Below reads signatory info from gradle.properties file
            useGpgCmd()
            // useInMemoryPgpKeys fails with error "InvalidUserDataException: no signatory found"
            /*
            useInMemoryPgpKeys(
                    rootProject.ext["signing.keyId"],
                    rootProject.ext["signing.key"],
                    rootProject.ext["signing.password"]
            )
            */

            // sign publishing.publications
            sign publishing.publications.release(MavenPublication)
        }
    }
}



